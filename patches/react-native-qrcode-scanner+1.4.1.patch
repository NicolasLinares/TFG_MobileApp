diff --git a/node_modules/react-native-qrcode-scanner/index.js b/node_modules/react-native-qrcode-scanner/index.js
index 1bb89d8..596cfa7 100644
--- a/node_modules/react-native-qrcode-scanner/index.js
+++ b/node_modules/react-native-qrcode-scanner/index.js
@@ -3,11 +3,13 @@
 import React, { Component } from 'react';
 import PropTypes from 'prop-types';
 
+
 import {
   StyleSheet,
   Dimensions,
   Vibration,
   Animated,
+  TouchableOpacity,
   Easing,
   View,
   Text,
@@ -15,6 +17,8 @@ import {
   PermissionsAndroid
 } from 'react-native';
 
+import IconII from "react-native-vector-icons/Ionicons";
+
 import { request, PERMISSIONS, RESULTS } from 'react-native-permissions';
 import { RNCamera as Camera } from 'react-native-camera';
 
@@ -100,7 +104,7 @@ export default class QRCodeScanner extends Component {
     permissionDialogMessage: 'Need camera permission',
     buttonPositive: 'OK',
     checkAndroid6Permissions: false,
-    flashMode: CAMERA_FLASH_MODE.auto,
+    flashMode: CAMERA_FLASH_MODE.off,
     cameraProps: {}
   };
 
@@ -111,7 +115,12 @@ export default class QRCodeScanner extends Component {
       fadeInOpacity: new Animated.Value(0),
       isAuthorized: false,
       isAuthorizationChecked: false,
-      disableVibrationByUser: false
+      disableVibrationByUser: false,
+      flash_background: "rgba(100,100,100,0.7)",
+      flash_color: 'rgba(255,255,255,0.7)',
+      flash_icon: "flash-off",
+      flash_activated: false,
+      flash_mode: this.props.flashMode,
     };
 
     this._scannerTimeout = null;
@@ -144,7 +153,7 @@ export default class QRCodeScanner extends Component {
 
     if (this.props.fadeIn) {
       Animated.sequence([
-        Animated.delay(1000),
+        Animated.delay(0),
         Animated.timing(this.state.fadeInOpacity, {
           toValue: 1,
           easing: Easing.inOut(Easing.quad),
@@ -179,6 +188,11 @@ export default class QRCodeScanner extends Component {
       }
       this._setScanning(true);
       this.props.onRead(e);
+
+      // ADDED TO TURN OFF THE FLASH MODE
+      if (this.state.flash_activated)
+        this.switchFlashMode();
+
       if (this.props.reactivate) {
         this._scannerTimeout = setTimeout(
           () => this._setScanning(false),
@@ -207,21 +221,73 @@ export default class QRCodeScanner extends Component {
       if (this.props.customMarker) {
         return this.props.customMarker;
       } else {
+
+        const { width } = Dimensions.get('screen');
+
         return (
-          <View style={styles.rectangleContainer}>
-            <View
-              style={[
-                styles.rectangle,
-                this.props.markerStyle ? this.props.markerStyle : null
-              ]}
-            />
-          </View>
+
+            // MODIFIED MARKER STYLE
+
+            <View style={cameraMask_style.rectangleContainer}>
+              <View style={{ ...StyleSheet.absoluteFill, alignItems: 'center', justifyContent: 'center' }}>
+                  <View style={{ width: width / 2, height: width / 2 }}>
+                      <View style={{ flex: 0.2, flexDirection: 'row' }}>
+                          <View style={[{ flex: 0.2}, cameraMask_style.leftTop]} />
+                          <View style={{ flex: 1 }} />
+                          <View style={[{ flex: 0.2}, cameraMask_style.rightTop]} />
+                      </View>
+                      <View style={{ flex: 1 }} />
+                      <View style={{ flex: 0.2, flexDirection: 'row' }}>
+                          <View style={[{ flex: 0.2}, cameraMask_style.leftBottom]} />
+                          <View style={{ flex: 1 }} />
+                          <View style={[{ flex: 0.2}, cameraMask_style.rightBottom]} />
+                      </View>
+                  </View>
+              </View>
+            </View>
+          
         );
       }
     }
     return null;
   }
 
+  // ADDED TO SWITCH FLASH MODE
+  switchFlashMode = () => {
+    if (!this.state.flash_mode) {
+      this.setState({
+        flash_activated: !this.state.flash_mode,
+        flash_icon: "flash",
+        flash_color: "#2381fc",
+        flash_background: "rgba(255,255,255,0.5)",
+        flash_mode: CAMERA_FLASH_MODE.torch
+      });
+      
+    } else {
+      this.setState({
+        flash_activated: !this.state.flash_mode,
+        flash_icon: "flash-off",
+        flash_color: "rgba(255,255,255,0.7)",
+        flash_background: "rgba(100,100,100,0.7)",
+        flash_mode: CAMERA_FLASH_MODE.off
+      });
+    }
+        
+  }
+
+  // ADDED BUTTON TO ACTIVATE FLASH
+  _renderFlashButton () {
+    return (
+
+        <TouchableOpacity 
+          style={[styles.button_flash, {backgroundColor: this.state.flash_background}]}
+          onPress={this.switchFlashMode}
+        >
+          <IconII name={this.state.flash_icon} size={25} color={this.state.flash_color}/>
+        </TouchableOpacity>
+    );
+  }
+
   _renderCameraComponent() {
     return (
       <Camera
@@ -233,7 +299,7 @@ export default class QRCodeScanner extends Component {
         style={[styles.camera, this.props.cameraStyle]}
         onBarCodeRead={this._handleBarCodeRead.bind(this)}
         type={this.props.cameraType}
-        flashMode={this.props.flashMode}
+        flashMode={this.state.flash_mode}
         captureAudio={false}
         {...this.props.cameraProps}
       >
@@ -260,6 +326,9 @@ export default class QRCodeScanner extends Component {
             }}
           >
             {this._renderCameraComponent()}
+            
+            {this._renderFlashButton()}
+
           </Animated.View>
         );
       }
@@ -306,7 +375,7 @@ const styles = StyleSheet.create({
     alignItems: 'center',
     justifyContent: 'center',
     backgroundColor: 'transparent',
-    height: Dimensions.get('window').width,
+    height: Dimensions.get('window').height,
     width: Dimensions.get('window').width
   },
 
@@ -323,5 +392,54 @@ const styles = StyleSheet.create({
     borderWidth: 2,
     borderColor: '#00FF00',
     backgroundColor: 'transparent'
+  },
+
+  button_flash: {
+    width:70,
+    height:70,
+    position: "absolute",
+    right: 50,
+    bottom: 80,
+    alignItems:'center',
+    justifyContent:'center',
+    borderRadius: 35,
+    backgroundColor: 'rgba(100,100,100,0.5)'
+  },
+});
+
+const border_width = 6;
+const border_color = 'rgba(255,255,255,0.7)';
+const border_radius = 20;
+
+const cameraMask_style = StyleSheet.create({
+  rectangleContainer: {
+    flex: 1,
+    alignItems: 'center',
+    justifyContent: 'center',
+    backgroundColor: 'transparent',
+  },
+  leftTop: {
+    borderLeftWidth: border_width,
+    borderTopWidth: border_width,
+    borderColor: border_color,
+    borderTopStartRadius: border_radius,
+  },
+  leftBottom: {
+    borderLeftWidth: border_width,
+    borderBottomWidth: border_width,
+    borderColor: border_color,
+    borderBottomStartRadius: border_radius
+  },
+  rightTop: {
+    borderRightWidth: border_width,
+    borderTopWidth: border_width,
+    borderColor: border_color,
+    borderTopEndRadius: border_radius
+  },
+  rightBottom: {
+    borderRightWidth: border_width,
+    borderBottomWidth: border_width,
+    borderColor: border_color,
+    borderBottomEndRadius: border_radius
   }
 });
\ No newline at end of file
